#-----------------------------------------------------------------
# Each entry is a Node sub-class name, listing the attributes
# and child nodes of the class:
#   <name>*     - a child node
#   <name>**    - a sequence of child nodes
#   <name>      - an attribute
#
# Copyright (C) 2014
# License: BSD
#-----------------------------------------------------------------

# inputs -> PortList
# outputs -> PortList
# decls -> DeclList
# states -> StateList
Sync: [name, inputs*, outputs*, decls*, states*]

# ports -> [Port, ...]
PortList: [ports**]

# depth_exp -> ID | NUMBER | DepthExp | DepthNone
Port: [name, depth_exp*]

DepthExp: [depth, shift]
DepthNone: []

# decls -> [StoreVar | StateVar, ...]
DeclList: [decls**]

StoreVar: [name]

# type -> IntType | EnumType
StateVar: [name, type*]
IntType: [size]

# labels -> [ID, ...]
EnumType: [labels**]

# states -> [State, ...]
StateList: [states**]

# trans_orders -> [TransOrder, ...]
State: [name, trans_orders**]

# trans_stmt -> [Trans, ...]
TransOrder: [trans_stmt**]

# condition -> CondSegmark | CondDataMsg | CondEmpty | CondElse
# guard -> IntExp
# actions -> [Assign | Send | Goto, ...]
Trans: [port, condition*, guard*, actions**]

CondSegmark: [depth]

# labels -> [ID, ...]
CondDataMsg: [choice, labels**, tail]

CondEmpty: []
CondElse: []

# rhs -> DataExp | IntExp
Assign: [lhs, rhs*]

# items -> [ItemThis | ItemVar | ItemExpand | ItemPair, ...]
DataExp: [items**]

ItemThis: []
ItemVar: [name]
ItemExpand: [name]

# value -> ID | IntExp
ItemPair: [label, value*]

# msg -> MsgSegmark | MsgData | MsgNil
Send: [msg*, port]

# depth -> ID | IntExp
MsgSegmark: [depth*]

# data_exp -> DataExp
MsgData: [choice, data_exp*]
MsgNil: []

# states -> [ID, ...]
Goto: [states**]

ID: [name]
NUMBER: [value]
IntExp: [exp]
